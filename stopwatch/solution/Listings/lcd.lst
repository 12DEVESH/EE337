C51 COMPILER V9.60.7.0   LCD                                                               03/12/2023 14:54:09 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE LCD
OBJECT MODULE PLACED IN .\Objects\lcd.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\lab6\q_2\lcd.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Li
                    -stings\lcd.lst) TABS(2) OBJECT(.\Objects\lcd.obj)

line level    source

   1          #include <at89c5131.h>
   2          #include "lcd.h"
   3          
   4          code unsigned char display_msg1[]="   START PROGRAM     ";            //Display msg on 1st line of lcd
   5          code unsigned char display_msg2[]="   FIRST INPUT   ";            //Display msg on 1st line of lcd
   6          code unsigned char display_msg3[]="   NEXT INPUT   ";           //Display msg on 1st line of lcd
   7          code unsigned char display_msg4[]="   SORTING...   ";           //Display msg on 1st line of lcd
   8          code unsigned char display_msg5[]="   SORTING   ";            //Display msg on 1st line of lcd
   9          code unsigned char display_msg6[]="   COMPLETED   ";            //Display msg on 1st line of lcd
  10          code unsigned char display_msg7[]="   NUMBER TO BE   ";           //Display msg on 1st line of lcd
  11          code unsigned char display_msg8[]="   SEARCHED   ";           //Display msg on 2nd line of lcd
  12          code unsigned char display_msg9[]="   THE INDEX IS   ";           //Display msg on 1st line of lcd
  13          code unsigned char display_msg10[]="   NUMBER   ";            //Display msg on 1st line of lcd
  14          code unsigned char display_msg11[]="   NOT FOUND   ";           //Display msg on 2nd line of lcd
  15          unsigned char arr[5];
  16          unsigned int i, j , k ;
  17          unsigned char num ,temp , l;
  18          
  19          
  20          
  21          void main()
  22          {
  23   1        lcd_init();
  24   1        lcd_cmd(0x80);                          //Move cursor to first line
  25   1        msdelay(4);
  26   1        lcd_write_string(display_msg1);
  27   1        P1 = 0x00;
  28   1        msdelay(5000);                            //5 sec delay
  29   1      
  30   1        lcd_cmd(0x80);                          //Move cursor to first line
  31   1        msdelay(4);
  32   1        lcd_write_string(display_msg2);
  33   1        msdelay(5000);  // give first input
  34   1          P1 = 0xFF;
  35   1          arr[0] = P1 & 0x0F ;                                               // storing input in the array
  36   1          P1 = ( (P1 & 0x0F) << 4 | (P1 & 0xF0) >> 4 );              // swap upper and lower nibbles 
  37   1          lcd_cmd(0x80);                          //Move cursor to first line
  38   1          msdelay(4);
  39   1          lcd_write_string(display_msg3);
  40   1        msdelay(5000);    // give next input
  41   1          P1 = 0x0F;
  42   1           msdelay(1000);
  43   1          arr[1] = P1 & 0x0F;
  44   1          P1 = ( (P1 & 0x0F) << 4 | (P1 & 0xF0) >> 4 );   
  45   1          lcd_cmd(0x80);                          //Move cursor to first line
  46   1          msdelay(4);
  47   1          lcd_write_string(display_msg3);
  48   1        msdelay(5000);                      // give next input
  49   1          P1 = 0x0F;
  50   1           msdelay(1000);
  51   1          arr[2] = P1 & 0x0F;
  52   1          P1 = ( (P1 & 0x0F) << 4 | (P1 & 0xF0) >> 4 );
  53   1          lcd_cmd(0x80);                          //Move cursor to first line
  54   1          msdelay(4);
C51 COMPILER V9.60.7.0   LCD                                                               03/12/2023 14:54:09 PAGE 2   

  55   1          lcd_write_string(display_msg3);
  56   1        msdelay(5000); 
  57   1          P1 = 0x0F;
  58   1           msdelay(1000);
  59   1          arr[3] = P1 & 0x0F;
  60   1          P1 = ( (P1 & 0x0F) << 4 | (P1 & 0xF0) >> 4 );
  61   1          lcd_cmd(0x80);                          //Move cursor to first line
  62   1          msdelay(4);
  63   1          lcd_write_string(display_msg3);
  64   1        msdelay(5000); 
  65   1          P1 = 0x0F;
  66   1           msdelay(1000); 
  67   1          arr[4] = P1 & 0x0F;
  68   1          P1 = ( (P1 & 0x0F) << 4 | (P1 & 0xF0) >> 4 );
  69   1          lcd_cmd(0x80);                          //Move cursor to first line
  70   1          msdelay(4);
  71   1          lcd_write_string(display_msg4);    // SORTING...
  72   1        msdelay(5000);
  73   1        
  74   1        P1 = 0x00;
  75   1        lcd_write_string(display_msg5);         // SORTING
  76   1        lcd_cmd(0xC0);                          //Move cursor to 2nd line of LCD
  77   1        lcd_write_string(display_msg6);         // COMPLETED
  78   1        msdelay(1000);
  79   1        
  80   1      /***********************************************************
  81   1        void bubbleSort(unsigned char arr[])
  82   1      
  83   1      ***********************************************************/  
  84   1      
  85   1          for (i = 0; i < 4; i++){
  86   2        
  87   2              // Last i elements are already in place
  88   2           for (j = 0; j < 5 - i - 1; j++){
  89   3              if (arr[j] > arr[j + 1])
  90   3                  {temp = arr[j];
  91   4                    arr[j] = arr[j+1];
  92   4                    arr[j+1] = temp;}}}
  93   1      
  94   1      //***************************************************************************
  95   1      
  96   1        for(k=0;k<5;k++){
  97   2          P1 = ( (arr[k] & 0x0F) << 4 | (arr[k] & 0xF0) >> 4 );
  98   2          msdelay(5000);
  99   2          P1 = 0x00;
 100   2          msdelay(1000);
 101   2        }
 102   1      //*******************************************************
 103   1         
 104   1        P1 = 0XFF;
 105   1        lcd_cmd(0x80);                          //Move cursor to first line
 106   1        msdelay(4);
 107   1        lcd_write_string(display_msg7);         // NUMBER TO BE 
 108   1        lcd_cmd(0xC0);                          //Move cursor to 2nd line of LCD
 109   1        msdelay(4);
 110   1        lcd_write_string(display_msg8);         // DISPLAYED
 111   1        
 112   1        P1 = 0x0f;      // to take inputs enter of first
 113   1        msdelay(5000);  // take input to be searched
 114   1        num = P1 & 0x0f;
 115   1      // ************************************************************
 116   1        //clear LEDS and LCD for 1 sec 
C51 COMPILER V9.60.7.0   LCD                                                               03/12/2023 14:54:09 PAGE 3   

 117   1        P1 = 0x00;
 118   1        lcd_init();
 119   1        msdelay(1000);
 120   1      //************************************************************* 
 121   1         //Search ALGO
 122   1        
 123   1        for(l=1;l<6;l++){
 124   2          if(arr[l-1] == num){
 125   3              lcd_cmd(0x80);                          //Move cursor to first line
 126   3              msdelay(4);
 127   3              lcd_write_string(display_msg9);
 128   3              P1 = ( (l & 0x0F) << 4 | (l & 0xF0) >> 4 );
 129   3              break;}
 130   2          else if(l == 5){
 131   3              P1 = 0XFF;
 132   3              lcd_cmd(0x01);
 133   3              lcd_cmd(0x80);                          //Move cursor to first line
 134   3              msdelay(4);
 135   3              lcd_write_string(display_msg10);
 136   3              lcd_cmd(0xc0);                          //Move cursor to 2nd line of LCD
 137   3              msdelay(4);
 138   3              lcd_write_string(display_msg11);}
 139   2                           } 
 140   1        while(1);
 141   1          
 142   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    731    ----
   CONSTANT SIZE    =    186    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
