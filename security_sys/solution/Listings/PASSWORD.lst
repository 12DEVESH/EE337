C51 COMPILER V9.60.7.0   PASSWORD                                                          03/06/2023 21:11:30 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE PASSWORD
OBJECT MODULE PLACED IN .\Objects\PASSWORD.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE PASSWORD.C OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -PASSWORD.lst) TABS(2) OBJECT(.\Objects\PASSWORD.obj)

line level    source

   1          #include <at89c5131.h>
   2          #include <string.h>
   3          #include "lcd.h"
   4          
   5          /* https://www.cs.uic.edu/~jbell/CourseNotes/C_Programming/CharacterStrings.html#:~:text=Overview,terminat
             -ed%20by%20a%20null%20byte.
   6             to know more about strings i reffered this site */
   7          
   8          code unsigned char display_msg1[]=" ENTER PASSWORD:     ";            //Display msg on 1st line of lcd
   9          code unsigned char display_msg2[]="CORRECT PASSWORD   ";//Display msg on 1st line of lcd
  10          code unsigned char display_msg3[]=" ACCESS GRANTED  ";
  11          code unsigned char display_msg4[]=" WRONG PASSWORD  " ;
  12          code unsigned char display_msg5[]=" ACCESS DENIED   ";
  13          code unsigned char correct_pass[]= "15A8*D6#"; // the terminating null byte is stored automatically 
  14          unsigned int i,Value;
  15          unsigned char a[9];
  16          sbit R0=P3^4; //row0
  17          sbit R1=P3^5; //row1
  18          sbit R2=P3^6; //row2
  19          sbit R3=P3^7; //row3
  20          
  21          void polling(void)
  22          {
  23   1        while(P3 == 0x0f){ 
  24   2            P3 = P3 & 0x0F;}  // check if any key pressed
  25   1      /*now find row*/  
  26   1            msdelay(20);        //debounce time 
  27   1            P3 = P3 & 0x0F;
  28   1        } 
  29          
  30          void main(){
  31   1        lcd_init();
  32   1        lcd_cmd(0x80);                          //Move cursor to first line
  33   1        msdelay(4);
  34   1        lcd_write_string(display_msg1);
  35   1        msdelay(4);
  36   1        
  37   1      /*******************************KEYBOARD INPUT CODE********************************************/   
  38   1      /* to print the pressed letter bring cursor to 2nd row and keep updating address*/      
  39   1            lcd_cmd(0xc0);                          //Move cursor to 2nd line of LCD
  40   1            msdelay(4);  
  41   1          
  42   1        for(i=0;i<8;i++){
  43   2            P3 = 0x0f; //make p3 as input port 
  44   2            while( P3 != 0x0f ){
  45   3              P3 = P3 & 0x0F;}  //ground p3.7 to p3.4 (rows) and check for inputs(columns)
  46   2            while( P3 == 0x0f){ 
  47   3              P3 = P3 & 0x0F;}  // check if any key pressed
  48   2      /*now ensure key pressed*/  
  49   2            msdelay(20);        //debounce time 
  50   2            P3 = P3 & 0x0F;
  51   2            while( P3 == 0x0F){
  52   3              polling();}     
  53   2          
C51 COMPILER V9.60.7.0   PASSWORD                                                          03/06/2023 21:11:30 PAGE 2   

  54   2      /*now find row*/      
  55   2            R0 = 0;   // check for row 0
  56   2            R1 = 1;
  57   2            R2 = 1;
  58   2            R3 = 1; 
  59   2            if(P3 == 0xEE) // row0 column3 A
  60   2            { lcd_write_char('A');
  61   3               a[i] = 'A';
  62   3               }
  63   2            else if(P3 == 0xED) // row0 column2 3
  64   2            { lcd_write_char('3');
  65   3               a[i] = '3';
  66   3               }
  67   2            else if(P3 == 0xEB) // row0 column1 2
  68   2            { lcd_write_char('2');
  69   3               a[i] = '2';
  70   3              }
  71   2            else if(P3 == 0xE7) // row0 column0 1
  72   2            { lcd_write_char('1');
  73   3               a[i] = '1';
  74   3               }  
  75   2          
  76   2            R0 = 1;   // check for row 1
  77   2            R1 = 0;
  78   2            R2 = 1;
  79   2            R3 = 1; 
  80   2            if(P3 == 0xDE) // row1 column3 B
  81   2            { lcd_write_char('B');
  82   3               a[i] = 'B';
  83   3                }
  84   2            else if(P3 == 0xDD) // row1 column2 6
  85   2            { lcd_write_char('6');
  86   3               a[i] = '6';
  87   3               }
  88   2            else if(P3 == 0xDB) // row1 column1 5
  89   2            { lcd_write_char('5');
  90   3               a[i] = '5';
  91   3               }
  92   2            else if(P3 == 0xD7) // row1 column0 4
  93   2            { lcd_write_char('4');
  94   3               a[i] = '4';
  95   3               }        
  96   2            
  97   2            R0 = 1;   // check for row 2
  98   2            R1 = 1;
  99   2            R2 = 0;
 100   2            R3 = 1; 
 101   2            if(P3 == 0xBE) // row2 column3 C
 102   2            { lcd_write_char('C');
 103   3               a[i] = 'C';
 104   3               }
 105   2            else if(P3 == 0xBD) // row2 column2 9
 106   2            { lcd_write_char('9');
 107   3               a[i] = '9';
 108   3               }
 109   2            else if(P3 == 0xBB) // row2 column1 8
 110   2            { lcd_write_char('8');
 111   3               a[i] = '8';
 112   3               }
 113   2            else if(P3 == 0xB7) // row2 column0 7
 114   2            { lcd_write_char('7');
 115   3               a[i] = '7';
C51 COMPILER V9.60.7.0   PASSWORD                                                          03/06/2023 21:11:30 PAGE 3   

 116   3               }
 117   2      
 118   2            R0 = 1;   // check for row 3
 119   2            R1 = 1;
 120   2            R2 = 1;
 121   2            R3 = 0; 
 122   2            if(P3 == 0x7E) // row3 column3 D
 123   2            { lcd_write_char('D');
 124   3               a[i] = 'D';
 125   3              }
 126   2            else if(P3 == 0x7D) // row3 column2 #
 127   2            { lcd_write_char('#');
 128   3               a[i] = '#';
 129   3               }
 130   2            else if(P3 == 0x7B) // row3 column1 0
 131   2            { lcd_write_char('0');
 132   3               a[i] = '0';
 133   3               }
 134   2            else if(P3 == 0x77) // row3 column0 *
 135   2            { lcd_write_char('*');
 136   3               a[i] = '*';
 137   3               }
 138   2            
 139   2        }   
 140   1      /*******************************COMPARE STRINGS STORED*****************************************/
 141   1        a[8] = '\0'; 
 142   1        Value  = strcmp(correct_pass,a);
 143   1        if(Value == 0){ 
 144   2              lcd_cmd(0x01);  // LCD clear
 145   2              msdelay(4);
 146   2              lcd_cmd(0x80);
 147   2              msdelay(4);
 148   2              lcd_write_string(display_msg2);    
 149   2              lcd_cmd(0xc0);                          //Move cursor to 2nd line of LCD
 150   2              msdelay(4);
 151   2              lcd_write_string(display_msg3); }   
 152   1        else{
 153   2              lcd_cmd(0x01);  // LCD clear
 154   2              msdelay(4);
 155   2              lcd_cmd(0x80);
 156   2              msdelay(4);
 157   2              lcd_write_string(display_msg4);    
 158   2              lcd_cmd(0xc0);                          //Move cursor to 2nd line of LCD
 159   2              msdelay(4);
 160   2              lcd_write_string(display_msg5);       }
 161   1        while(1);
 162   1      }
 163            


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    715    ----
   CONSTANT SIZE    =    105    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     13       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
